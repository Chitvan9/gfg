//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main(String[] args) throws IOException
	{
	        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        while(t-->0)
        {
            
            String inputLine1[] = br.readLine().trim().split(" "); 
            int i=0;
            int N = Integer.parseInt(inputLine1[i++]);
            int leaves = Integer.parseInt(inputLine1[i++]);
            
            int frogs[] = new int[(int)(N)];
            
            String inputLine2[] = br.readLine().trim().split(" ");
            for ( i = 0; i < N; i++) {
                frogs[i] = Integer.parseInt(inputLine2[i]);
            }
        
            Solution ob = new Solution();
            System.out.println(ob.unvisitedLeaves(N, leaves, frogs));
            
        }
	}
}

// } Driver Code Ends


//User function Template for Java

class Solution {
     public int unvisitedLeaves(int N, int leaves, int frogs[]) {
        // Code here 
        /*  
           leaves = 4 -> 1 2 3 4
           1st frog strength = 3 -> only 3 will be visited 
           2nd frog strength = 2 -> 2,4 will be visted
           3rd frog strength = 4 -> only 4 will be visted
           
           here index 1 is not visted hece our answer is 1
        
        */
        boolean vis[] = new boolean[leaves+1];
        for(int i=0; i<N; i++){
            int strength = frogs[i];
            //if we get 1 as strength then it will cover all the places so simply return 0
            if(strength==1){
                return 0;
            }
            if(strength<=leaves && !vis[strength]){
                visitLeaves(strength,vis,leaves);
            }
            
        }
        //count number of places not visited
        int ans = 0;
        for(int i=1; i<vis.length; i++){
            if(!vis[i]){
                ans++;
            }
        }
        return ans;
    }
    public void visitLeaves(int stren, boolean vis[],int n){
        for(int i=stren; i<=n; i+=stren){
            vis[i] = true;
        }
    }
}
