import java.util.*;
import java.io.*;

class GFG {
    public static void main(String args[])throws IOException
    {
        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out=new PrintWriter(System.out);
        int t=Integer.parseInt(in.readLine());
        while(t-->0){
            int n=Integer.parseInt(in.readLine());
            String s[]=in.readLine().trim().split(" ");
            int a[]=new int[n];
            for(int i=0;i<n;i++){
                a[i]=Integer.parseInt(s[i]);
            }
            Solution ob=new Solution();
            long arr[]=ob.optimalArray(n,a);
            for(long i:arr){
                out.print(i+" ");
            }
            out.println();
        }
        out.close();
    }
}


//soln


class Solution {
   public long[] optimalArray(int n,int a[])

    {

        long[] minNumOfOperations = new long[n];

        

        // First Element will need NO Operations

        // so, pushing 0

        minNumOfOperations[0] = 0;

        

        for(int i = 1; i < n; i++) {

            // Index of Median Element

            int index = i/2;

            // All Elements should reach the Median Elment -> Subtracting Median

            // Adding the Min. No. of Operations of Previous Elements

            minNumOfOperations[i] = a[i]-a[index] + minNumOfOperations[i-1];

        }

        

        return minNumOfOperations;

    }
}
